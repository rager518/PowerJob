// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240111.5

#pragma once
#include "winrt/PowerToys.GPOWrapper.h"
namespace winrt::PowerToys::GPOWrapper::implementation
{
    template <typename D, typename... I>
    struct WINRT_IMPL_EMPTY_BASES GPOWrapper_base : implements<D, PowerToys::GPOWrapper::GPOWrapper, I...>
    {
        using base_type = GPOWrapper_base;
        using class_type = PowerToys::GPOWrapper::GPOWrapper;
        using implements_type = typename GPOWrapper_base::implements_type;
        using implements_type::implements_type;
        
        hstring GetRuntimeClassName() const
        {
            return L"PowerToys.GPOWrapper.GPOWrapper";
        }
    };
}
namespace winrt::PowerToys::GPOWrapper::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct WINRT_IMPL_EMPTY_BASES GPOWrapperT : implements<D, winrt::Windows::Foundation::IActivationFactory, winrt::PowerToys::GPOWrapper::IGPOWrapperStatics, I...>
    {
        using instance_type = PowerToys::GPOWrapper::GPOWrapper;

        hstring GetRuntimeClassName() const
        {
            return L"PowerToys.GPOWrapper.GPOWrapper";
        }
        auto GetConfiguredAlwaysOnTopEnabledValue()
        {
            return T::GetConfiguredAlwaysOnTopEnabledValue();
        }
        auto GetConfiguredAwakeEnabledValue()
        {
            return T::GetConfiguredAwakeEnabledValue();
        }
        auto GetConfiguredCmdNotFoundEnabledValue()
        {
            return T::GetConfiguredCmdNotFoundEnabledValue();
        }
        auto GetConfiguredColorPickerEnabledValue()
        {
            return T::GetConfiguredColorPickerEnabledValue();
        }
        auto GetConfiguredCropAndLockEnabledValue()
        {
            return T::GetConfiguredCropAndLockEnabledValue();
        }
        auto GetConfiguredFancyZonesEnabledValue()
        {
            return T::GetConfiguredFancyZonesEnabledValue();
        }
        auto GetConfiguredFileLocksmithEnabledValue()
        {
            return T::GetConfiguredFileLocksmithEnabledValue();
        }
        auto GetConfiguredSvgPreviewEnabledValue()
        {
            return T::GetConfiguredSvgPreviewEnabledValue();
        }
        auto GetConfiguredMarkdownPreviewEnabledValue()
        {
            return T::GetConfiguredMarkdownPreviewEnabledValue();
        }
        auto GetConfiguredMonacoPreviewEnabledValue()
        {
            return T::GetConfiguredMonacoPreviewEnabledValue();
        }
        auto GetConfiguredPdfPreviewEnabledValue()
        {
            return T::GetConfiguredPdfPreviewEnabledValue();
        }
        auto GetConfiguredGcodePreviewEnabledValue()
        {
            return T::GetConfiguredGcodePreviewEnabledValue();
        }
        auto GetConfiguredSvgThumbnailsEnabledValue()
        {
            return T::GetConfiguredSvgThumbnailsEnabledValue();
        }
        auto GetConfiguredPdfThumbnailsEnabledValue()
        {
            return T::GetConfiguredPdfThumbnailsEnabledValue();
        }
        auto GetConfiguredGcodeThumbnailsEnabledValue()
        {
            return T::GetConfiguredGcodeThumbnailsEnabledValue();
        }
        auto GetConfiguredStlThumbnailsEnabledValue()
        {
            return T::GetConfiguredStlThumbnailsEnabledValue();
        }
        auto GetConfiguredHostsFileEditorEnabledValue()
        {
            return T::GetConfiguredHostsFileEditorEnabledValue();
        }
        auto GetConfiguredImageResizerEnabledValue()
        {
            return T::GetConfiguredImageResizerEnabledValue();
        }
        auto GetConfiguredKeyboardManagerEnabledValue()
        {
            return T::GetConfiguredKeyboardManagerEnabledValue();
        }
        auto GetConfiguredFindMyMouseEnabledValue()
        {
            return T::GetConfiguredFindMyMouseEnabledValue();
        }
        auto GetConfiguredMouseHighlighterEnabledValue()
        {
            return T::GetConfiguredMouseHighlighterEnabledValue();
        }
        auto GetConfiguredMouseJumpEnabledValue()
        {
            return T::GetConfiguredMouseJumpEnabledValue();
        }
        auto GetConfiguredMousePointerCrosshairsEnabledValue()
        {
            return T::GetConfiguredMousePointerCrosshairsEnabledValue();
        }
        auto GetConfiguredMouseWithoutBordersEnabledValue()
        {
            return T::GetConfiguredMouseWithoutBordersEnabledValue();
        }
        auto GetConfiguredPowerRenameEnabledValue()
        {
            return T::GetConfiguredPowerRenameEnabledValue();
        }
        auto GetConfiguredPowerLauncherEnabledValue()
        {
            return T::GetConfiguredPowerLauncherEnabledValue();
        }
        auto GetConfiguredQuickAccentEnabledValue()
        {
            return T::GetConfiguredQuickAccentEnabledValue();
        }
        auto GetConfiguredRegistryPreviewEnabledValue()
        {
            return T::GetConfiguredRegistryPreviewEnabledValue();
        }
        auto GetConfiguredScreenRulerEnabledValue()
        {
            return T::GetConfiguredScreenRulerEnabledValue();
        }
        auto GetConfiguredShortcutGuideEnabledValue()
        {
            return T::GetConfiguredShortcutGuideEnabledValue();
        }
        auto GetConfiguredTextExtractorEnabledValue()
        {
            return T::GetConfiguredTextExtractorEnabledValue();
        }
        auto GetConfiguredAdvancedPasteEnabledValue()
        {
            return T::GetConfiguredAdvancedPasteEnabledValue();
        }
        auto GetConfiguredVideoConferenceMuteEnabledValue()
        {
            return T::GetConfiguredVideoConferenceMuteEnabledValue();
        }
        auto GetConfiguredPeekEnabledValue()
        {
            return T::GetConfiguredPeekEnabledValue();
        }
        auto GetDisableNewUpdateToastValue()
        {
            return T::GetDisableNewUpdateToastValue();
        }
        auto GetDisableAutomaticUpdateDownloadValue()
        {
            return T::GetDisableAutomaticUpdateDownloadValue();
        }
        auto GetDisableShowWhatsNewAfterUpdatesValue()
        {
            return T::GetDisableShowWhatsNewAfterUpdatesValue();
        }
        auto GetAllowExperimentationValue()
        {
            return T::GetAllowExperimentationValue();
        }
        auto GetRunPluginEnabledValue(hstring const& pluginID)
        {
            return T::GetRunPluginEnabledValue(pluginID);
        }
        auto GetConfiguredEnvironmentVariablesEnabledValue()
        {
            return T::GetConfiguredEnvironmentVariablesEnabledValue();
        }
        auto GetConfiguredQoiPreviewEnabledValue()
        {
            return T::GetConfiguredQoiPreviewEnabledValue();
        }
        auto GetConfiguredQoiThumbnailsEnabledValue()
        {
            return T::GetConfiguredQoiThumbnailsEnabledValue();
        }
        auto GetAllowedAdvancedPasteOnlineAIModelsValue()
        {
            return T::GetAllowedAdvancedPasteOnlineAIModelsValue();
        }
        auto GetConfiguredMwbClipboardSharingEnabledValue()
        {
            return T::GetConfiguredMwbClipboardSharingEnabledValue();
        }
        auto GetConfiguredMwbFileTransferEnabledValue()
        {
            return T::GetConfiguredMwbFileTransferEnabledValue();
        }
        auto GetConfiguredMwbUseOriginalUserInterfaceValue()
        {
            return T::GetConfiguredMwbUseOriginalUserInterfaceValue();
        }
        auto GetConfiguredMwbDisallowBlockingScreensaverValue()
        {
            return T::GetConfiguredMwbDisallowBlockingScreensaverValue();
        }
        auto GetConfiguredMwbSameSubnetOnlyValue()
        {
            return T::GetConfiguredMwbSameSubnetOnlyValue();
        }
        auto GetConfiguredMwbValidateRemoteIpValue()
        {
            return T::GetConfiguredMwbValidateRemoteIpValue();
        }
        auto GetConfiguredMwbDisableUserDefinedIpMappingRulesValue()
        {
            return T::GetConfiguredMwbDisableUserDefinedIpMappingRulesValue();
        }
        auto GetConfiguredMwbPolicyDefinedIpMappingRules()
        {
            return T::GetConfiguredMwbPolicyDefinedIpMappingRules();
        }
        [[noreturn]] winrt::Windows::Foundation::IInspectable ActivateInstance() const
        {
            throw hresult_not_implemented();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_GPOWRAPPER_XAML_G_H) || __has_include("GPOWrapper.xaml.g.h")

#include "GPOWrapper.xaml.g.h"

#else

namespace winrt::PowerToys::GPOWrapper::implementation
{
    template <typename D, typename... I>
    using GPOWrapperT = GPOWrapper_base<D, I...>;
}

#endif
