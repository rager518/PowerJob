#include "pch.h"
#include "GPOWrapper.h"
#include "GPOWrapper.g.cpp"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.
static_assert(false, "This file is generated by a tool and will be overwritten. Open this error and view the comment for assistance.");

namespace winrt::PowerToys::GPOWrapper::implementation
{
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredAlwaysOnTopEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredAwakeEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredCmdNotFoundEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredColorPickerEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredCropAndLockEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredFancyZonesEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredFileLocksmithEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredSvgPreviewEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredMarkdownPreviewEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredMonacoPreviewEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredPdfPreviewEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredGcodePreviewEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredSvgThumbnailsEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredPdfThumbnailsEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredGcodeThumbnailsEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredStlThumbnailsEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredHostsFileEditorEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredImageResizerEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredKeyboardManagerEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredFindMyMouseEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredMouseHighlighterEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredMouseJumpEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredMousePointerCrosshairsEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredMouseWithoutBordersEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredPowerRenameEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredPowerLauncherEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredQuickAccentEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredRegistryPreviewEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredScreenRulerEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredShortcutGuideEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredTextExtractorEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredAdvancedPasteEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredVideoConferenceMuteEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredPeekEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetDisableNewUpdateToastValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetDisableAutomaticUpdateDownloadValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetDisableShowWhatsNewAfterUpdatesValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetAllowExperimentationValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetRunPluginEnabledValue(hstring const& pluginID)
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredEnvironmentVariablesEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredQoiPreviewEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredQoiThumbnailsEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetAllowedAdvancedPasteOnlineAIModelsValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredMwbClipboardSharingEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredMwbFileTransferEnabledValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredMwbUseOriginalUserInterfaceValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredMwbDisallowBlockingScreensaverValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredMwbSameSubnetOnlyValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredMwbValidateRemoteIpValue()
    {
        throw hresult_not_implemented();
    }
    winrt::PowerToys::GPOWrapper::GpoRuleConfigured GPOWrapper::GetConfiguredMwbDisableUserDefinedIpMappingRulesValue()
    {
        throw hresult_not_implemented();
    }
    hstring GPOWrapper::GetConfiguredMwbPolicyDefinedIpMappingRules()
    {
        throw hresult_not_implemented();
    }
}
