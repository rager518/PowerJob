// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240111.5

#pragma once
#ifndef WINRT_PowerToys_GPOWrapper_H
#define WINRT_PowerToys_GPOWrapper_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.240111.5"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.240111.5"
#include "winrt/impl/PowerToys.GPOWrapper.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredAlwaysOnTopEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredAlwaysOnTopEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredAwakeEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredAwakeEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredCmdNotFoundEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredCmdNotFoundEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredColorPickerEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredColorPickerEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredCropAndLockEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredCropAndLockEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredFancyZonesEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredFancyZonesEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredFileLocksmithEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredFileLocksmithEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredSvgPreviewEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredSvgPreviewEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredMarkdownPreviewEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredMarkdownPreviewEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredMonacoPreviewEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredMonacoPreviewEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredPdfPreviewEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredPdfPreviewEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredGcodePreviewEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredGcodePreviewEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredSvgThumbnailsEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredSvgThumbnailsEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredPdfThumbnailsEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredPdfThumbnailsEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredGcodeThumbnailsEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredGcodeThumbnailsEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredStlThumbnailsEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredStlThumbnailsEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredHostsFileEditorEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredHostsFileEditorEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredImageResizerEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredImageResizerEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredKeyboardManagerEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredKeyboardManagerEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredFindMyMouseEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredFindMyMouseEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredMouseHighlighterEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredMouseHighlighterEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredMouseJumpEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredMouseJumpEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredMousePointerCrosshairsEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredMousePointerCrosshairsEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredMouseWithoutBordersEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredMouseWithoutBordersEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredPowerRenameEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredPowerRenameEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredPowerLauncherEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredPowerLauncherEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredQuickAccentEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredQuickAccentEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredRegistryPreviewEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredRegistryPreviewEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredScreenRulerEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredScreenRulerEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredShortcutGuideEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredShortcutGuideEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredTextExtractorEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredTextExtractorEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredAdvancedPasteEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredAdvancedPasteEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredVideoConferenceMuteEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredVideoConferenceMuteEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredPeekEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredPeekEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetDisableNewUpdateToastValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetDisableNewUpdateToastValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetDisableAutomaticUpdateDownloadValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetDisableAutomaticUpdateDownloadValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetDisableShowWhatsNewAfterUpdatesValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetDisableShowWhatsNewAfterUpdatesValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetAllowExperimentationValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetAllowExperimentationValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetRunPluginEnabledValue(param::hstring const& pluginID) const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetRunPluginEnabledValue(*(void**)(&pluginID), reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredEnvironmentVariablesEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredEnvironmentVariablesEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredQoiPreviewEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredQoiPreviewEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredQoiThumbnailsEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredQoiThumbnailsEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetAllowedAdvancedPasteOnlineAIModelsValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetAllowedAdvancedPasteOnlineAIModelsValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredMwbClipboardSharingEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredMwbClipboardSharingEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredMwbFileTransferEnabledValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredMwbFileTransferEnabledValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredMwbUseOriginalUserInterfaceValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredMwbUseOriginalUserInterfaceValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredMwbDisallowBlockingScreensaverValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredMwbDisallowBlockingScreensaverValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredMwbSameSubnetOnlyValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredMwbSameSubnetOnlyValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredMwbValidateRemoteIpValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredMwbValidateRemoteIpValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredMwbDisableUserDefinedIpMappingRulesValue() const
    {
        winrt::PowerToys::GPOWrapper::GpoRuleConfigured result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredMwbDisableUserDefinedIpMappingRulesValue(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>::GetConfiguredMwbPolicyDefinedIpMappingRules() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::PowerToys::GPOWrapper::IGPOWrapperStatics)->GetConfiguredMwbPolicyDefinedIpMappingRules(&result));
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D>
    struct produce<D, winrt::PowerToys::GPOWrapper::IGPOWrapper> : produce_base<D, winrt::PowerToys::GPOWrapper::IGPOWrapper>
    {
    };
    template <typename D>
    struct produce<D, winrt::PowerToys::GPOWrapper::IGPOWrapperStatics> : produce_base<D, winrt::PowerToys::GPOWrapper::IGPOWrapperStatics>
    {
        int32_t __stdcall GetConfiguredAlwaysOnTopEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredAlwaysOnTopEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredAwakeEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredAwakeEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredCmdNotFoundEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredCmdNotFoundEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredColorPickerEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredColorPickerEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredCropAndLockEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredCropAndLockEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredFancyZonesEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredFancyZonesEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredFileLocksmithEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredFileLocksmithEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredSvgPreviewEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredSvgPreviewEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredMarkdownPreviewEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredMarkdownPreviewEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredMonacoPreviewEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredMonacoPreviewEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredPdfPreviewEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredPdfPreviewEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredGcodePreviewEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredGcodePreviewEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredSvgThumbnailsEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredSvgThumbnailsEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredPdfThumbnailsEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredPdfThumbnailsEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredGcodeThumbnailsEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredGcodeThumbnailsEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredStlThumbnailsEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredStlThumbnailsEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredHostsFileEditorEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredHostsFileEditorEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredImageResizerEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredImageResizerEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredKeyboardManagerEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredKeyboardManagerEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredFindMyMouseEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredFindMyMouseEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredMouseHighlighterEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredMouseHighlighterEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredMouseJumpEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredMouseJumpEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredMousePointerCrosshairsEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredMousePointerCrosshairsEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredMouseWithoutBordersEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredMouseWithoutBordersEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredPowerRenameEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredPowerRenameEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredPowerLauncherEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredPowerLauncherEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredQuickAccentEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredQuickAccentEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredRegistryPreviewEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredRegistryPreviewEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredScreenRulerEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredScreenRulerEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredShortcutGuideEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredShortcutGuideEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredTextExtractorEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredTextExtractorEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredAdvancedPasteEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredAdvancedPasteEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredVideoConferenceMuteEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredVideoConferenceMuteEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredPeekEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredPeekEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDisableNewUpdateToastValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetDisableNewUpdateToastValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDisableAutomaticUpdateDownloadValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetDisableAutomaticUpdateDownloadValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDisableShowWhatsNewAfterUpdatesValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetDisableShowWhatsNewAfterUpdatesValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAllowExperimentationValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetAllowExperimentationValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetRunPluginEnabledValue(void* pluginID, int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetRunPluginEnabledValue(*reinterpret_cast<hstring const*>(&pluginID)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredEnvironmentVariablesEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredEnvironmentVariablesEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredQoiPreviewEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredQoiPreviewEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredQoiThumbnailsEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredQoiThumbnailsEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAllowedAdvancedPasteOnlineAIModelsValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetAllowedAdvancedPasteOnlineAIModelsValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredMwbClipboardSharingEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredMwbClipboardSharingEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredMwbFileTransferEnabledValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredMwbFileTransferEnabledValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredMwbUseOriginalUserInterfaceValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredMwbUseOriginalUserInterfaceValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredMwbDisallowBlockingScreensaverValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredMwbDisallowBlockingScreensaverValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredMwbSameSubnetOnlyValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredMwbSameSubnetOnlyValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredMwbValidateRemoteIpValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredMwbValidateRemoteIpValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredMwbDisableUserDefinedIpMappingRulesValue(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>(this->shim().GetConfiguredMwbDisableUserDefinedIpMappingRulesValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConfiguredMwbPolicyDefinedIpMappingRules(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().GetConfiguredMwbPolicyDefinedIpMappingRules());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
WINRT_EXPORT namespace winrt::PowerToys::GPOWrapper
{
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::PowerToys::GPOWrapper::IGPOWrapper> : winrt::impl::hash_base {};
    template<> struct hash<winrt::PowerToys::GPOWrapper::IGPOWrapperStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::PowerToys::GPOWrapper::GPOWrapper> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
