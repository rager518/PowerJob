// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240111.5

#pragma once
#ifndef WINRT_PowerToys_GPOWrapper_0_H
#define WINRT_PowerToys_GPOWrapper_0_H
WINRT_EXPORT namespace winrt::PowerToys::GPOWrapper
{
    enum class GpoRuleConfigured : int32_t
    {
        WrongValue = -3,
        Unavailable = -2,
        NotConfigured = -1,
        Disabled = 0,
        Enabled = 1,
    };
    struct IGPOWrapper;
    struct IGPOWrapperStatics;
    struct GPOWrapper;
}
namespace winrt::impl
{
    template <> struct category<winrt::PowerToys::GPOWrapper::IGPOWrapper>{ using type = interface_category; };
    template <> struct category<winrt::PowerToys::GPOWrapper::IGPOWrapperStatics>{ using type = interface_category; };
    template <> struct category<winrt::PowerToys::GPOWrapper::GPOWrapper>{ using type = class_category; };
    template <> struct category<winrt::PowerToys::GPOWrapper::GpoRuleConfigured>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::PowerToys::GPOWrapper::GPOWrapper> = L"PowerToys.GPOWrapper.GPOWrapper";
    template <> inline constexpr auto& name_v<winrt::PowerToys::GPOWrapper::GpoRuleConfigured> = L"PowerToys.GPOWrapper.GpoRuleConfigured";
    template <> inline constexpr auto& name_v<winrt::PowerToys::GPOWrapper::IGPOWrapper> = L"PowerToys.GPOWrapper.IGPOWrapper";
    template <> inline constexpr auto& name_v<winrt::PowerToys::GPOWrapper::IGPOWrapperStatics> = L"PowerToys.GPOWrapper.IGPOWrapperStatics";
    template <> inline constexpr guid guid_v<winrt::PowerToys::GPOWrapper::IGPOWrapper>{ 0x714CEB20,0xC766,0x596A,{ 0x82,0xF9,0x7B,0x02,0x52,0xBD,0xBE,0xB9 } }; // 714CEB20-C766-596A-82F9-7B0252BDBEB9
    template <> inline constexpr guid guid_v<winrt::PowerToys::GPOWrapper::IGPOWrapperStatics>{ 0x2DBC08DE,0x6763,0x5589,{ 0x9C,0x56,0xDA,0x6E,0x04,0x4A,0x60,0x81 } }; // 2DBC08DE-6763-5589-9C56-DA6E044A6081
    template <> struct default_interface<winrt::PowerToys::GPOWrapper::GPOWrapper>{ using type = winrt::PowerToys::GPOWrapper::IGPOWrapper; };
    template <> struct abi<winrt::PowerToys::GPOWrapper::IGPOWrapper>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::PowerToys::GPOWrapper::IGPOWrapperStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetConfiguredAlwaysOnTopEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredAwakeEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredCmdNotFoundEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredColorPickerEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredCropAndLockEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredFancyZonesEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredFileLocksmithEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredSvgPreviewEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredMarkdownPreviewEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredMonacoPreviewEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredPdfPreviewEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredGcodePreviewEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredSvgThumbnailsEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredPdfThumbnailsEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredGcodeThumbnailsEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredStlThumbnailsEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredHostsFileEditorEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredImageResizerEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredKeyboardManagerEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredFindMyMouseEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredMouseHighlighterEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredMouseJumpEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredMousePointerCrosshairsEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredMouseWithoutBordersEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredPowerRenameEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredPowerLauncherEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredQuickAccentEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredRegistryPreviewEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredScreenRulerEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredShortcutGuideEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredTextExtractorEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredAdvancedPasteEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredVideoConferenceMuteEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredPeekEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetDisableNewUpdateToastValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetDisableAutomaticUpdateDownloadValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetDisableShowWhatsNewAfterUpdatesValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetAllowExperimentationValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetRunPluginEnabledValue(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredEnvironmentVariablesEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredQoiPreviewEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredQoiThumbnailsEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetAllowedAdvancedPasteOnlineAIModelsValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredMwbClipboardSharingEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredMwbFileTransferEnabledValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredMwbUseOriginalUserInterfaceValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredMwbDisallowBlockingScreensaverValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredMwbSameSubnetOnlyValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredMwbValidateRemoteIpValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredMwbDisableUserDefinedIpMappingRulesValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetConfiguredMwbPolicyDefinedIpMappingRules(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_PowerToys_GPOWrapper_IGPOWrapper
    {
    };
    template <> struct consume<winrt::PowerToys::GPOWrapper::IGPOWrapper>
    {
        template <typename D> using type = consume_PowerToys_GPOWrapper_IGPOWrapper<D>;
    };
    template <typename D>
    struct consume_PowerToys_GPOWrapper_IGPOWrapperStatics
    {
        auto GetConfiguredAlwaysOnTopEnabledValue() const;
        auto GetConfiguredAwakeEnabledValue() const;
        auto GetConfiguredCmdNotFoundEnabledValue() const;
        auto GetConfiguredColorPickerEnabledValue() const;
        auto GetConfiguredCropAndLockEnabledValue() const;
        auto GetConfiguredFancyZonesEnabledValue() const;
        auto GetConfiguredFileLocksmithEnabledValue() const;
        auto GetConfiguredSvgPreviewEnabledValue() const;
        auto GetConfiguredMarkdownPreviewEnabledValue() const;
        auto GetConfiguredMonacoPreviewEnabledValue() const;
        auto GetConfiguredPdfPreviewEnabledValue() const;
        auto GetConfiguredGcodePreviewEnabledValue() const;
        auto GetConfiguredSvgThumbnailsEnabledValue() const;
        auto GetConfiguredPdfThumbnailsEnabledValue() const;
        auto GetConfiguredGcodeThumbnailsEnabledValue() const;
        auto GetConfiguredStlThumbnailsEnabledValue() const;
        auto GetConfiguredHostsFileEditorEnabledValue() const;
        auto GetConfiguredImageResizerEnabledValue() const;
        auto GetConfiguredKeyboardManagerEnabledValue() const;
        auto GetConfiguredFindMyMouseEnabledValue() const;
        auto GetConfiguredMouseHighlighterEnabledValue() const;
        auto GetConfiguredMouseJumpEnabledValue() const;
        auto GetConfiguredMousePointerCrosshairsEnabledValue() const;
        auto GetConfiguredMouseWithoutBordersEnabledValue() const;
        auto GetConfiguredPowerRenameEnabledValue() const;
        auto GetConfiguredPowerLauncherEnabledValue() const;
        auto GetConfiguredQuickAccentEnabledValue() const;
        auto GetConfiguredRegistryPreviewEnabledValue() const;
        auto GetConfiguredScreenRulerEnabledValue() const;
        auto GetConfiguredShortcutGuideEnabledValue() const;
        auto GetConfiguredTextExtractorEnabledValue() const;
        auto GetConfiguredAdvancedPasteEnabledValue() const;
        auto GetConfiguredVideoConferenceMuteEnabledValue() const;
        auto GetConfiguredPeekEnabledValue() const;
        auto GetDisableNewUpdateToastValue() const;
        auto GetDisableAutomaticUpdateDownloadValue() const;
        auto GetDisableShowWhatsNewAfterUpdatesValue() const;
        auto GetAllowExperimentationValue() const;
        auto GetRunPluginEnabledValue(param::hstring const& pluginID) const;
        auto GetConfiguredEnvironmentVariablesEnabledValue() const;
        auto GetConfiguredQoiPreviewEnabledValue() const;
        auto GetConfiguredQoiThumbnailsEnabledValue() const;
        auto GetAllowedAdvancedPasteOnlineAIModelsValue() const;
        auto GetConfiguredMwbClipboardSharingEnabledValue() const;
        auto GetConfiguredMwbFileTransferEnabledValue() const;
        auto GetConfiguredMwbUseOriginalUserInterfaceValue() const;
        auto GetConfiguredMwbDisallowBlockingScreensaverValue() const;
        auto GetConfiguredMwbSameSubnetOnlyValue() const;
        auto GetConfiguredMwbValidateRemoteIpValue() const;
        auto GetConfiguredMwbDisableUserDefinedIpMappingRulesValue() const;
        auto GetConfiguredMwbPolicyDefinedIpMappingRules() const;
    };
    template <> struct consume<winrt::PowerToys::GPOWrapper::IGPOWrapperStatics>
    {
        template <typename D> using type = consume_PowerToys_GPOWrapper_IGPOWrapperStatics<D>;
    };
}
#endif
